{"version":3,"sources":["logo.svg","pages/TwoDimensional.js","pages/ThreeD.js","pages/ThreePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TwoDimensional","useState","width","setWidth","height","setHeight","seed","setSeed","canvas","useRef","canvas2","canvas3","canvas4","handleClickGenerate","e","a","context","current","getContext","save","fillStyle","fillRect","strokeStyle","simplex","SimplexNoise","i","j","value2d","noise2D","color","console","log","handleClickGenerate3","context2","handleClickGenerate4","context3","context4","useEffect","className","ref","type","value","onChange","target","handleSeedChange","handleWidthChange","handleHeightChange","onClick","ThreeD","props","state","scene","THREE","camera","window","innerWidth","innerHeight","renderer","controls","OrbitControls","domElement","loader","setPath","handleChange","bind","animate","event","this","setState","forceUpdate","prevProps","children","length","remove","componentDidMount","requestAnimationFrame","update","render","texture","setSize","mount","appendChild","geometry","tmesh","updateMatrix","totalGeom","GeomBlue","merge","matrix","materials","materialsBlue","all","geometries","max","tempmat","vertexColors","cubet","position","x","z","Math","floor","y","push","clone","undefined","Object","keys","check","tempcolor","resColor","add","set","autoRotate","Component","ThreePage","onKeyPress","charCode","preventDefault","App","to","path","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,qNCiP5BC,MA1Of,WAA2B,IAAD,EACEC,mBAAS,KADX,mBACjBC,EADiB,KACVC,EADU,OAEIF,mBAAS,KAFb,mBAEjBG,EAFiB,KAETC,EAFS,OAGHJ,mBAAS,KAHN,mBAGjBK,EAHiB,KAGZC,EAHY,KAOlBC,EAASC,iBAAO,MAChBC,EAAUD,iBAAO,MACjBE,EAAUF,iBAAO,MACjBG,EAAUH,iBAAO,MA0DjBI,EAAmB,uCAAE,WAAOC,GAAP,yBAAAC,EAAA,sDAWzB,IAVMC,EAAUR,EAAOS,QAAQC,WAAW,MACzBV,EAAOS,QAAQC,WAAW,MAC3CF,EAAQG,OACRH,EAAQI,UAAY,iBACpBJ,EAAQK,SAAS,GAAI,GAAI,GAAI,IAC7BL,EAAQM,YAAc,QAChBC,EAAU,IAAIC,IAAalB,GAIzBmB,EAAE,EAAEA,EAAEvB,EAAMuB,IAClB,IAAQC,EAAE,EAAEA,EAAEtB,EAAOsB,IAEfC,EAASJ,EAAQK,QAAU,IAAFH,EAAU,IAAFC,GACjCG,EAAgB,IAARF,EAAY,IAItBX,EAAQI,UAAY,OAAOS,EAAM,IAAIA,EAAM,IAAIA,EAAM,IACrDb,EAAQK,SAASI,EAAGC,EAAG,EAAG,GAC5BV,EAAQM,YAAc,QAa1BQ,QAAQC,IAAI,OAlCa,2CAAF,sDA0CnBC,EAAoB,uCAAE,WAAOlB,GAAP,yBAAAC,EAAA,sDAQ1B,KAPMkB,EAAWvB,EAAQO,QAAQC,WAAW,OACnCC,OACTc,EAASX,YAAc,QACjBC,EAAU,IAAIC,IAAalB,GAIzBmB,EAAE,EAAEA,EAAEvB,EAAMuB,IAClB,IAAQC,EAAE,EAAEA,EAAEtB,EAAOsB,IAEfC,EAASJ,EAAQK,QAAU,IAAFH,EAAU,IAAFC,GAEjCG,EAAgB,KADpBF,EAAiB,EAARA,GAAYA,EAAQ,KACL,IAItBM,EAASb,UAAY,OAAOS,EAAM,IAAIA,EAAM,IAAIA,EAAM,IACtDI,EAASZ,SAAW,EAAFI,EAAO,EAAFC,EAAK,EAAG,GAEjCO,EAASX,YAAc,QAa3BQ,QAAQC,IAAI,OAjCc,2CAAF,sDAmCpBG,EAAoB,uCAAE,WAAOpB,GAAP,iCAAAC,EAAA,sDAW1B,IAVMoB,EAAWxB,EAAQM,QAAQC,WAAW,MACtCkB,EAAWxB,EAAQK,QAAQC,WAAW,MAC5CiB,EAAShB,OACTgB,EAASb,YAAc,QACvBc,EAASjB,OACTiB,EAASd,YAAc,QACjBC,EAAU,IAAIC,IAAalB,GAIzBmB,EAAE,EAAEA,EAAEvB,EAAM,EAAEuB,IAChBE,EAASJ,EAAQK,QAAU,IAAFH,EAAQ,GAElCI,EAAgB,KADnBF,EAAiB,GAARA,GAAcA,EAAQ,IAAa,GAARA,GACb,IACxBG,QAAQC,IAAIF,EAAM,SAASF,GAC3BQ,EAASf,UAAY,OAAOS,EAAM,IAAIA,EAAM,IAAIA,EAAM,IACtDM,EAASd,SAAW,EAAFI,EAAKrB,EAAO,EAAG,EAAG,GAErC,IAAQqB,EAAE,EAAEA,EAAEvB,EAAMuB,IAOlB,IANIE,EAASJ,EAAQK,QAAU,IAAFH,EAAQ,GACxBF,EAAQK,QAAc,KAALH,EAAE,GAAS,GAErCI,EAAgB,IAARF,EAAY,IACxBG,QAAQC,IAAIF,EAAM,SAASF,GAC3BS,EAAShB,UAAY,QACbM,EAAEtB,EAAO,EAAQ,GAANyB,EAAUH,EAAEtB,EAAOsB,IACpCU,EAASf,SAASI,EAAGC,EAAG,EAAG,GAI/BI,QAAQC,IAAI,OA/Bc,4CAAF,sDA8D1B,OA5BAM,qBAAU,WACR,IAAMrB,EAAUR,EAAOS,QAAQC,WAAW,MACpCe,EAAWvB,EAAQO,QAAQC,WAAW,MACtCiB,EAAWxB,EAAQM,QAAQC,WAAW,MACtCkB,EAAWxB,EAAQK,QAAQC,WAAW,MAE5CF,EAAQG,OAERH,EAAQI,UAAY,kBACpBJ,EAAQK,SAAS,EAAG,EAAGnB,EAAOE,GAE9B6B,EAASd,OAETc,EAASb,UAAY,kBACrBa,EAASZ,SAAS,EAAG,EAAGnB,EAAOE,GAE/B+B,EAAShB,OAETgB,EAASf,UAAY,kBACrBe,EAASd,SAAS,EAAG,EAAGnB,EAAOE,GAE/BgC,EAASjB,OAETiB,EAAShB,UAAY,kBACrBgB,EAASf,SAAS,EAAG,EAAGnB,EAAOE,MAK/B,yBAAKkC,UAAU,QACb,yBAAKA,UAAU,UAAf,iBAEG,4BAAQC,IAAK/B,EAAQN,MAAOA,EAAOE,OAAQA,IAC3C,6BAHH,0BAKG,4BAAQmC,IAAK7B,EAASR,MAAOA,EAAOE,OAAQA,IAC5C,6BANH,oBAQG,4BAAQmC,IAAK5B,EAAST,MAAOA,EAAOE,OAAQA,IAC5C,6BATH,gCAWG,4BAAQmC,IAAK3B,EAASV,MAAOA,EAAOE,OAAQA,KAE/C,yBAAKkC,UAAU,aAAf,QACO,2BAAOE,KAAK,OAAOC,MAAOnC,EAAMoC,SAAU,SAAA5B,GAAC,OApM7B,SAACA,GAClBP,EAAQO,EAAE6B,OAAOF,OAmM+BG,CAAiB9B,MADrE,SAEQ,2BAAO0B,KAAK,OAAOC,MAAOvC,EAAOwC,SAAU,SAAA5B,GAAC,OArN9B,SAACA,GACtBA,EAAE6B,OAAOF,OAAO,IACjBtC,EAASW,EAAE6B,OAAOF,OAElBtC,EAAS,KAiN6C0C,CAAkB/B,MAFxE,UAGS,2BAAO0B,KAAK,OAAOC,MAAOrC,EAAQsC,SAAU,SAAA5B,GAAC,OA/M/B,SAACA,GACvBA,EAAE6B,OAAOF,OAAO,IACnBpC,EAAUS,EAAE6B,OAAOF,OAEnBpC,EAAU,KA2MgDyC,CAAmBhC,MACzE,4BAAQiC,QAAS,SAAAjC,GAAID,IACnBmB,EAAqBlB,GACrBoB,EAAqBpB,KAFvB,e,sEClDOkC,E,YA/Kb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACT,MAAOQ,EAAM3C,MAC3B,EAAK6C,MAAQ,IAAIC,IACjB,EAAKC,OAAS,IAAID,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAc,GAAK,KAC3F,EAAKC,SAAW,IAAIL,IACpB,EAAKM,SAAW,IAAIC,IAAe,EAAKN,OAAQ,EAAKI,SAASG,YAC9D,EAAKC,OAAS,IAAIT,IAClB,EAAKS,OAAOC,QAAQ,aAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBAXI,E,0EAaNE,GACXC,KAAKC,SAAS,CAAC3B,MAAOyB,EAAMvB,OAAOF,QACpC0B,KAAKE,gB,yCAEaC,GAEjB,GAAIH,KAAKlB,MAAM3C,OAASgE,EAAUhE,KAAM,CAGtC,IAFA6D,KAAKC,SAAS,CAAC3B,MAAM0B,KAAKlB,MAAM3C,OAChCwB,QAAQC,IAAI,OAAOoC,KAAKjB,MAAMT,OACxB0B,KAAKhB,MAAMoB,SAASC,OAAS,GACjCL,KAAKhB,MAAMsB,OAAON,KAAKhB,MAAMoB,SAAS,IAGtCJ,KAAKO,uB,gCAKTC,sBAAuBR,KAAKF,SAG9BE,KAAKT,SAASkB,SACdT,KAAKV,SAASoB,OAAQV,KAAKhB,MAAMgB,KAAKd,U,wCAEpBZ,GAGhBX,QAAQC,IAAI,YACZD,QAAQC,IAAI,OAAOoC,KAAKW,SACxBX,KAAKV,SAASsB,QAASzB,OAAOC,WAAYD,OAAOE,aAGjDW,KAAKa,MAAMC,YAAad,KAAKV,SAASG,YAGxC,IAAIsB,EAAW,IAAI9B,IAVD,UAWd+B,EAAQ,IAAI/B,IAAW8B,EAAU,IAAI9B,IAAyB,CAAEvB,MAAM,YAC1EsD,EAAMC,eAEN,IAAIC,EAAY,IAAIjC,IAGhBkC,GAFY,IAAIlC,IACH,IAAIA,IACN,IAAIA,KACnBiC,EAAUE,MAAOJ,EAAMD,SAAUC,EAAMK,QAsBrC,IArBF,IAAIC,EAAU,GAGVC,EAAc,GACdC,EAAI,CAACF,UAAU,GAAGG,WAAW,IAczBrE,EAAU,IAAIC,IAAa2C,KAAKjB,MAAMT,OAExCoD,EAAI,EACApE,GAAG,IAAIA,EAAE,IAAMA,IACrB,IAAI,IAAIC,GAAG,IAAIA,EAAE,IAAMA,IAAI,CACzB,IACIG,EAAgB,IADPN,EAAQK,QAAU,IAAFH,EAAU,IAAFC,GACb,IAGpBoE,OAAO,EACTA,EAAQ,IAAI1C,IAAyB,CAAEvB,MAAO,eAA2BkE,aAAc3C,MASvF,IAAI4C,EAAM,IAAI5C,IAAY8B,EAAUY,GACpCE,EAAMC,SAASC,EAzDL,GAyDOzE,EACjBuE,EAAMC,SAASE,EA1DL,GA0DOzE,EACdmE,EAAIO,KAAKC,MAAMxE,KAClBgE,EAAIO,KAAKC,MAAMxE,IACfmE,EAAMC,SAASK,EA7DL,GA6DOF,KAAKC,MAAMD,KAAKC,MAAMxE,GAAO,GAC9C6D,EAAca,KAAKT,EAAQU,SAC3BR,EAAMZ,eACNE,EAASC,MAAOS,EAAMd,SAAUc,EAAMR,OAAOC,EAAUjB,aAEhBiC,IAApCd,EAAIC,WAAWQ,KAAKC,MAAMxE,KAG3B8D,EAAIC,WAAWQ,KAAKC,MAAMxE,IAAQ,IAAIuB,IACtCuC,EAAIC,WAAWQ,KAAKC,MAAMxE,IAAQ0D,MAAOS,EAAMd,SAAUc,EAAMR,SAG/DG,EAAIC,WAAWQ,KAAKC,MAAMxE,IAAQ0D,MAAOS,EAAMd,SAAUc,EAAMR,QASvE1D,QAAQC,IAAI2E,OAAOC,KAAKhB,EAAIC,YAAY,cAAcC,GACtD/D,QAAQC,IAAI4D,EAAIC,YAChB,IAAI,IAAInE,EAAE,EAAEA,GAAGoE,EAAIpE,IAAI,CACrB,IAAImF,EAAMF,OAAOC,KAAKhB,EAAIC,YAAYnE,GAClCoF,OAAS,OACFJ,IAARG,IACDC,EAAUH,OAAOC,KAAKhB,EAAIC,YAAYgB,IACrCC,GACH/E,QAAQC,IAAI8E,EAAU,IAAIpF,EAAE,IAAIkE,EAAIC,WAAWnE,IAC/C,IAAIqF,OAAQ,EAGRA,EAFCD,EAAU,IAEF,IAAIzD,IAAWuC,EAAIC,WAAWnE,GAAG,IAAI2B,IAAwB,CAAEvB,MAAO,SAAauE,KAAKC,MAAMD,KAAKC,MAAMQ,GAAW,GAAG,IAAIT,KAAKC,MAAMQ,GAAW,OAEpJA,GAAW,KAAKA,GAAW,IAGxB,IAAIzD,IAAWuC,EAAIC,WAAWnE,GAAG,IAAI2B,IAAwB,CAAEvB,MAAO,oBAItE,IAAIuB,IAAWuC,EAAIC,WAAWnE,GAAG,IAAI2B,IAAwB,CAACvB,MAAM,SAAauE,KAAKC,MAAMD,KAAKC,MAAMQ,IAAY,SAGhI1C,KAAKhB,MAAM4D,IAAID,GAIR,IAAI1D,IAAWkC,EAAS,IAAIlC,IAAyB,CAAEvB,MAAM,OAMtEsC,KAAKd,OAAO4C,SAASe,KAAM,IAAM,KAAO,KACxC7C,KAAKT,SAASuD,YAAW,EACzB9C,KAAKT,SAASkB,SAGdT,KAAKF,Y,+DAKG,IAAD,OACP,OACE,6BACI,8BAEA,yBAAK3B,UAAU,SAASC,IAAK,SAAAA,GAAG,OAAK,EAAKyC,MAAQzC,U,GA1KvC2E,aCsBNC,MApBf,WAAsB,IAAD,EAEOlH,mBAAS,KAFhB,mBAEVK,EAFU,KAEJC,EAFI,KAYnB,OACE,qCACU,2BAAOiC,KAAK,OAAO4E,WAAY,SAAAtG,GAAC,OAVrB,SAACA,GACH,IAAZA,EAAEuG,WACDvF,QAAQC,IAAI,iBACZjB,EAAEwG,iBACF/G,EAAQO,EAAE6B,OAAOF,QAMmBsB,CAAajD,MACpD,kBAAC,EAAD,CAAQR,KAAMA,M,eCmBRiH,MA9Bf,WACE,OACE,yBAAKjF,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,IAAD,KACA,4BACC,4BACO,kBAAC,IAAD,CAAMkF,GAAG,KAAT,cAEP,4BACO,kBAAC,IAAD,CAAMA,GAAG,OAAT,OAEN,4BACM,kBAAC,IAAD,CAAMA,GAAG,OAAT,QAGN,6BACE,kBAAC,IAAD,CAAOC,KAAK,MAAMC,UAAW1H,IAC9B,kBAAC,IAAD,CAAOyH,KAAK,MAAMC,UAAWP,SCpBpBQ,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCZNC,IAASlD,OAAO,kBAAC,EAAD,MAASmD,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3G,QAAQ2G,MAAMA,EAAMC,c","file":"static/js/main.ea1c455b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useRef, useEffect ,useState} from \"react\";\r\nimport SimplexNoise from \"simplex-noise\"\r\nimport './TwoDimensional.css'\r\n\r\n\r\n\r\n\r\nfunction TwoDimensional() {\r\n  const [width, setWidth] = useState(300);\r\n  const [height, setHeight] = useState(300);\r\n  const [seed,setSeed]=useState(413)\r\n  // const [index,setIndex]=({x:0,y:0})\r\n  var x=0;\r\n  var y=0;\r\n  const canvas = useRef(null);\r\n  const canvas2 = useRef(null);\r\n  const canvas3 = useRef(null);\r\n  const canvas4 = useRef(null);\r\n  const handleWidthChange = (e) => {\r\n    if(e.target.value<=500)\r\n      setWidth(e.target.value);\r\n      else\r\n      setWidth(500);\r\n  };\r\n\r\n  const handleHeightChange = (e) => {\r\n    if(e.target.value<=500)\r\n    setHeight(e.target.value);\r\n    else\r\n    setHeight(500);\r\n  };\r\n\r\n  var globalID;\r\n\r\n  const handleSeedChange = (e) => {\r\n          setSeed(e.target.value);\r\n  };\r\n   const draw= async(x,y,color)=>{\r\n    const context = canvas.current.getContext(\"2d\");\r\n    setTimeout(function() {\r\n      // console.log(\"drawing\")\r\n      context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n      context.fillRect(x*4, y*4, 4, 4);\r\n    }, 1);\r\n  }\r\n  const repeat=(e)=>{\r\n    const context = canvas.current.getContext(\"2d\");\r\n    if(y<(height/4-1))\r\n    {\r\n      const simplex = new SimplexNoise(seed);\r\n      let value2d =simplex.noise2D(x, y);\r\n      let color = value2d*128+128\r\n      context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n      context.fillRect(x*4, y*4, 4, 4);\r\n      y=y+1;\r\n    }\r\n    else if(y===(height/4-1)&&x<(width/4-1)){\r\n      const simplex = new SimplexNoise(seed);\r\n      let value2d =simplex.noise2D(x, y);\r\n      let color = value2d*128+128\r\n      context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n      context.fillRect(x*4, y*4, 4, 4);\r\n\r\n      y=0;\r\n      x=x+1;\r\n    }\r\n    else if(y===(height/4-1)&&x===(width/4-1)){\r\n      //stop\r\n      x=0;\r\n      y=0;\r\n      cancelAnimationFrame(globalID);\r\n    }\r\n    globalID = requestAnimationFrame(repeat);\r\n  }\r\n\r\n  const handleClickGenerate= async (e)=>{\r\n    const context = canvas.current.getContext(\"2d\");\r\n    const context2 = canvas.current.getContext(\"2d\");\r\n    context.save();\r\n    context.fillStyle = \"rgb(255,20,20)\";\r\n    context.fillRect(90, 90, 50, 50);\r\n    context.strokeStyle = \"black\";\r\n    const simplex = new SimplexNoise(seed);\r\n    // value2d = simplex.noise2D(width, height);\r\n    // console.log(value2d)\r\n    // console.log(value2d*128+128)\r\n    for(let i=0;i<width;i++){\r\n      for(let j=0;j<height;j++){\r\n        // setInterval(function, milliseconds, param1, param2, ...)\r\n        let value2d =simplex.noise2D(i*0.01, j*0.01);\r\n        let color = value2d*128+128\r\n        // context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n        // context.fillRect(i, j, 1, 1);\r\n\r\n          context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n          context.fillRect(i, j, 1, 1);\r\n        context.strokeStyle = \"black\";\r\n\r\n        // draw(i,j,color)\r\n        // setInterval(function, milliseconds, param1, param2, ...)\r\n        // let value2d =simplex.noise2D(i, j);\r\n        // let color = value2d*128+128\r\n        // context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n        // context.fillRect(i, j, 1, 1);\r\n        // context.stroke();\r\n        \r\n        \r\n      }\r\n    }\r\n    console.log(\"end\")  \r\n  }\r\n\r\n  const handleClickGenerate2= async (e)=>{\r\n   \r\n    globalID = requestAnimationFrame(repeat);\r\n  }\r\n\r\n  const handleClickGenerate3= async (e)=>{\r\n    const context2 = canvas2.current.getContext(\"2d\");\r\n    context2.save();\r\n    context2.strokeStyle = \"black\";\r\n    const simplex = new SimplexNoise(seed);\r\n    // value2d = simplex.noise2D(width, height);\r\n    // console.log(value2d)\r\n    // console.log(value2d*128+128)\r\n    for(let i=0;i<width;i++){\r\n      for(let j=0;j<height;j++){\r\n        // setInterval(function, milliseconds, param1, param2, ...)\r\n        let value2d =simplex.noise2D(i*0.01, j*0.01);\r\n        value2d=(value2d*3)*(value2d+0.5) //-0.5 -- 0.5 * (-0.5 -- 1.5) min =-0.25, max=0.75\r\n        let color = value2d*128+128\r\n        // context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n        // context.fillRect(i, j, 1, 1);\r\n\r\n          context2.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n          context2.fillRect(i*1, j*1, 1, 1);\r\n\r\n        context2.strokeStyle = \"black\";\r\n\r\n        // draw(i,j,color)\r\n        // setInterval(function, milliseconds, param1, param2, ...)\r\n        // let value2d =simplex.noise2D(i, j);\r\n        // let color = value2d*128+128\r\n        // context.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n        // context.fillRect(i, j, 1, 1);\r\n        // context.stroke();\r\n        \r\n        \r\n      }\r\n    }\r\n    console.log(\"end\")  \r\n  }\r\n  const handleClickGenerate4= async (e)=>{\r\n    const context3 = canvas3.current.getContext(\"2d\");\r\n    const context4 = canvas4.current.getContext(\"2d\");\r\n    context3.save();\r\n    context3.strokeStyle = \"black\";\r\n    context4.save();\r\n    context4.strokeStyle = \"black\";\r\n    const simplex = new SimplexNoise(seed);\r\n    // value2d = simplex.noise2D(width, height);\r\n    // console.log(value2d)\r\n    // console.log(value2d*128+128)\r\n    for(let i=0;i<width/4;i++){\r\n      let value2d =simplex.noise2D(i*0.01, 0);\r\n      value2d=(value2d*0.5)*(value2d+0.5)+value2d*0.3 //-0.5 -- 0.5 * (-0.5 -- 1.5) min =-0.25 -0.4, max=0.75 +0.4\r\n     let color = value2d*128+128\r\n     console.log(color,\"color \",value2d)\r\n     context3.fillStyle = \"rgb(\"+color+\",\"+color+\",\"+color+\")\";\r\n     context3.fillRect(i*4, height/2, 4, 4);\r\n    }\r\n    for(let i=0;i<width;i++){\r\n      let value2d =simplex.noise2D(i*0.01, 0);\r\n      let value2d2=simplex.noise2D((i-1)*0.01, 0);;\r\n\r\n      let color = value2d*128+128\r\n      console.log(color,\"color \",value2d)\r\n      context4.fillStyle = \"black\";\r\n      for(let j=height/2+color*0.1;j<height;j++){\r\n        context4.fillRect(i, j, 1, 1);\r\n        \r\n      }\r\n    }\r\n    console.log(\"end\")  \r\n  }\r\n\r\n  useEffect(() => {\r\n    const context = canvas.current.getContext(\"2d\");\r\n    const context2 = canvas2.current.getContext(\"2d\");\r\n    const context3 = canvas3.current.getContext(\"2d\");\r\n    const context4 = canvas4.current.getContext(\"2d\");\r\n\r\n    context.save();\r\n    // context.scale(pixelRatio, pixelRatio);\r\n    context.fillStyle = \"hsl(0, 0%, 95%)\";\r\n    context.fillRect(0, 0, width, height);\r\n\r\n    context2.save();\r\n    // context.scale(pixelRatio, pixelRatio);\r\n    context2.fillStyle = \"hsl(0, 0%, 95%)\";\r\n    context2.fillRect(0, 0, width, height);\r\n\r\n    context3.save();\r\n    // context.scale(pixelRatio, pixelRatio);\r\n    context3.fillStyle = \"hsl(0, 0%, 95%)\";\r\n    context3.fillRect(0, 0, width, height);\r\n\r\n    context4.save();\r\n    // context.scale(pixelRatio, pixelRatio);\r\n    context4.fillStyle = \"hsl(0, 0%, 95%)\";\r\n    context4.fillRect(0, 0, width, height);\r\n\r\n  });\r\n\r\n  return (\r\n    <div className=\"TwoD\">\r\n      <div className=\"Canvas\">\r\n          Simplex noise:\r\n         <canvas ref={canvas} width={width} height={height}/>\r\n         <br></br>\r\n         Simplex noise adjusted:\r\n         <canvas ref={canvas2} width={width} height={height}/>\r\n         <br></br>\r\n         Simplex noise 1d:\r\n         <canvas ref={canvas3} width={width} height={height}/>\r\n         <br></br>\r\n         simplex noise Result terrain:\r\n         <canvas ref={canvas4} width={width} height={height}/>\r\n      </div>\r\n      <div className=\"Modifiers\">\r\n        Seed:<input type=\"text\" value={seed} onChange={e=>handleSeedChange(e)} />\r\n        Width:<input type=\"text\" value={width} onChange={e=>handleWidthChange(e)} />\r\n        Height:<input type=\"text\" value={height} onChange={e=>handleHeightChange(e)} />\r\n        <button onClick={e=>{handleClickGenerate();\r\n          handleClickGenerate3(e);\r\n          handleClickGenerate4(e)}}>GENERATE</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TwoDimensional;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as THREE from \"three\";\r\nimport SimplexNoise from \"simplex-noise\"\r\nimport './Three.css'\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { Camera } from \"three\";\r\nclass ThreeD extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: props.seed};\r\n    this.scene = new THREE.Scene();\r\n    this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight , 0.1, 10000 );\r\n    this.renderer = new THREE.WebGLRenderer();\r\n    this.controls = new OrbitControls( this.camera, this.renderer.domElement );\r\n    this.loader = new THREE.TextureLoader();\r\n    this.loader.setPath('textures/');\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.animate=this.animate.bind(this)\r\n  }\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n   this.forceUpdate()\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    // this.setState({value:this.props.seed})\r\n    if (this.props.seed !== prevProps.seed) {\r\n      this.setState({value:this.props.seed})\r\n      console.log('test'+this.state.value)\r\n      while(this.scene.children.length > 0){ \r\n        this.scene.remove(this.scene.children[0]); \r\n    }\r\n      \r\n        this.componentDidMount()\r\n        \r\n    }\r\n  }\r\n   animate() {\r\n    requestAnimationFrame( this.animate );\r\n  //   cube.rotation.x += 0.01;\r\n  //   cube.rotation.y += 0.01;\r\n  this.controls.update();\r\n  this.renderer.render( this.scene,this.camera );\r\n  };\r\n  componentDidMount(value) {\r\n    const blocksize=10;\r\n\r\n    console.log(\"RENDERER\")\r\n    console.log(\"test\"+this.texture)\r\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n    // document.body.appendChild( renderer.domElement );\r\n    // use ref as a mount point of the Three.js scene instead of the document.body\r\n    this.mount.appendChild( this.renderer.domElement );\r\n\r\n\r\n  var geometry = new THREE.BoxGeometry( blocksize, blocksize, blocksize );\r\n  let tmesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial( { color:12345678 }));\r\n  tmesh.updateMatrix();\r\n  // this.scene.add( tmesh );\r\n  var totalGeom = new THREE.Geometry();\r\n  var GeomGreen = new THREE.Geometry();\r\n  var GeomYellow = new THREE.Geometry();\r\n  var GeomBlue = new THREE.Geometry();\r\n  totalGeom.merge( tmesh.geometry, tmesh.matrix );\r\n  var materials=[]\r\n  var materialsGreen=[]\r\n  var materialsYellow=[]\r\n  var materialsBlue=[]\r\n  var all={materials:[],geometries:{}};\r\n  // this.scene.add( totalGeom );\r\n  \r\n  \r\n  // var material = new THREE.MeshBasicMaterial( { map: this.texture } );\r\n  // var cube = new THREE.Mesh( geometry, this.material );\r\n  // this.scene.add( cube );\r\n  //   // for(let i=0;i<5;i++){\r\n    //     //     let cubet=new THREE.Mesh( geometry, material );\r\n    //     //     cubet.position.x=i*2\r\n    //     //     scene.add( cubet );\r\n    \r\n    //     // }\r\n    //     // adding cubes\r\n    const simplex = new SimplexNoise(this.state.value);\r\n    \r\n    var max=0;\r\n    for(let i=-100;i<100/1;i++){\r\n      for(let j=-100;j<100/1;j++){\r\n        let value2d =simplex.noise2D(i*0.01, j*0.01);\r\n        let color = value2d*128+128\r\n        //  console.log(\"color is\",color)\r\n        \r\n        let tempmat;\r\n          tempmat=new THREE.MeshBasicMaterial( { color: \"rgb(\"+0+\",\"+0+\",\"+150+\")\",vertexColors: THREE.VertexColors} );\r\n          // if(all.materials[Math.floor(color)]===undefined){\r\n          //   all.materials[Math.floor(color)]=[];\r\n          //   all.materials[Math.floor(color)].push(tempmat.clone())\r\n          // }\r\n          // else{\r\n          //   all.materials[Math.floor(color)].push(tempmat.clone())\r\n          // }\r\n          \r\n          let cubet=new THREE.Mesh( geometry, tempmat );\r\n          cubet.position.x=i*blocksize\r\n          cubet.position.z=j*blocksize\r\n          if(max<Math.floor(color))\r\n          max=Math.floor(color);\r\n          cubet.position.y=Math.floor(Math.floor(color)/8)*blocksize\r\n          materialsBlue.push(tempmat.clone())\r\n          cubet.updateMatrix();\r\n          GeomBlue.merge( cubet.geometry, cubet.matrix,materials.length);\r\n          // console.log(Math.floor(color)+\" pre\")\r\n          if(all.geometries[Math.floor(color)]===undefined){\r\n            // console.log(Math.floor(color)+\" undefined\")\r\n            // console.log(Math.floor(color))\r\n            all.geometries[Math.floor(color)]=new THREE.Geometry();\r\n            all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix);\r\n          }\r\n          else{\r\n            all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix);\r\n          }\r\n\r\n      }\r\n    }\r\n    //https://discourse.threejs.org/t/problem-in-merging-multiple-objects-into-one/5154\r\n    // var total = new THREE.Mesh(totalGeom,materials);//new THREE.MeshBasicMaterial( { color:12345678 })        THIS IS LAG\r\n\r\n\r\n    console.log(Object.keys(all.geometries),\"this is all\",max) //Object.keys(all.geometries)[i]\r\n    console.log(all.geometries)\r\n    for(let i=0;i<=max;i++){\r\n      let check=Object.keys(all.geometries)[i];\r\n      let tempcolor;\r\n      if(check!==undefined)\r\n        tempcolor=Object.keys(all.geometries)[check];\r\n      if(tempcolor)\r\n      console.log(tempcolor+\" \"+i+\" \"+all.geometries[i])\r\n      let resColor;\r\n        if(tempcolor<100)\r\n        {\r\n          resColor=new THREE.Mesh(all.geometries[i],new THREE.MeshBasicMaterial({ color: \"rgb(\"+0+\",\"+Math.floor(Math.floor(tempcolor)/2)+\",\"+Math.floor(tempcolor)+\")\" }))\r\n        }\r\n        else if(tempcolor>=100&&tempcolor<=110)\r\n        {\r\n          \r\n          resColor=new THREE.Mesh(all.geometries[i],new THREE.MeshBasicMaterial({ color: \"rgb(\"+144+\",\"+144+\",\"+0+\")\" }))\r\n        }\r\n        else\r\n        {\r\n          resColor=new THREE.Mesh(all.geometries[i],new THREE.MeshBasicMaterial({color:\"rgb(\"+0+\",\"+Math.floor(Math.floor(tempcolor))+\",\"+0+\")\"}))\r\n        }\r\n\r\n      this.scene.add(resColor)\r\n    }\r\n    // var green=new THREE.Mesh(GeomGreen,new THREE.MeshBasicMaterial( { color:0x00ff00 }) )\r\n    // var yellow=new THREE.Mesh(GeomYellow,new THREE.MeshBasicMaterial( { color:0xffff00 }) )\r\n    var blue=new THREE.Mesh(GeomBlue,new THREE.MeshBasicMaterial( { color:0x0000ff }) )\r\n    // this.scene.add(green)\r\n    // this.scene.add(yellow)\r\n    // this.scene.add(blue)\r\n      // this.scene.add(total);\r\n    \r\n    this.camera.position.set( -2000, 2000, -2000  );\r\n    this.controls.autoRotate=true\r\n    this.controls.update();\r\n    // this.renderer.compile(this.scene,this.camera);\r\n    // this.scene.traverse(obj => obj.frustumCulled = false);\r\n    this.animate();\r\n  }\r\n  init(){\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n          <div>\r\n          </div>\r\n          <div className=\"ThreeD\" ref={ref => (this.mount = ref)} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ThreeD;\r\n// var max=0;\r\n// for(let i=-75;i<100/1;i++){\r\n//   for(let j=-75;j<100/1;j++){\r\n//     let value2d =simplex.noise2D(i*0.01, j*0.01);\r\n//     let color = value2d*128+128\r\n//     //  console.log(\"color is\",color)\r\n    \r\n//     let tempmat;\r\n//     if(color<100)//water\r\n//     {\r\n//       tempmat=new THREE.MeshBasicMaterial( { color: \"rgb(\"+0+\",\"+0+\",\"+150+\")\",vertexColors: THREE.VertexColors} );\r\n//       if(all.materials[Math.floor(color)]===undefined){\r\n//         all.materials[Math.floor(color)]=[];\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n//       else{\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n      \r\n//       let cubet=new THREE.Mesh( geometry, tempmat );\r\n//       cubet.position.x=i*1\r\n//       cubet.position.z=j*1\r\n//       if(max<Math.floor(color))\r\n//       max=Math.floor(color);\r\n//       cubet.position.y=Math.floor(Math.floor(color)/8)*1\r\n//       materialsBlue.push(tempmat.clone())\r\n//       cubet.updateMatrix();\r\n//       GeomBlue.merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       if(all.geometries[Math.floor(color)]===undefined){\r\n//         all.geometries[Math.floor(color)]=new THREE.Geometry();\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n//       else{\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n      \r\n      \r\n//     }\r\n//     else if(color>=100&&color<=110)//sand\r\n//     {\r\n      \r\n//       tempmat=new THREE.MeshBasicMaterial( { color: \"rgb(\"+144+\",\"+144+\",\"+0+\")\",vertexColors: THREE.VertexColors } );\r\n      \r\n//       if(all.materials[Math.floor(color)]===undefined){\r\n//         all.materials[Math.floor(color)]=[];\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n//       else{\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n      \r\n\r\n//       let cubet=new THREE.Mesh( geometry, tempmat );\r\n//       cubet.position.x=i*1\r\n//       cubet.position.z=j*1\r\n//       if(max<Math.floor(color))\r\n//       max=Math.floor(color);\r\n//       cubet.position.y=Math.floor(Math.floor(color)/8)*1\r\n//       materialsYellow.push(tempmat.clone())\r\n//       cubet.updateMatrix();\r\n//       GeomYellow.merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       if(all.geometries[Math.floor(color)]===undefined){\r\n//         all.geometries[Math.floor(color)]=new THREE.Geometry();\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n//       else{\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n//     }\r\n//     else\r\n//     {\r\n//       tempmat=new THREE.MeshBasicMaterial( {color:\"rgb(\"+0+\",\"+150+\",\"+0+\")\",vertexColors: THREE.VertexColors} );\r\n//       if(all.materials[Math.floor(color)]===undefined){\r\n//         all.materials[Math.floor(color)]=[];\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n//       else{\r\n//         all.materials[Math.floor(color)].push(tempmat.clone())\r\n//       }\r\n      \r\n//       let cubet=new THREE.Mesh( geometry, tempmat );\r\n//       cubet.position.x=i*1\r\n//       cubet.position.z=j*1\r\n//       if(max<Math.floor(Math.floor(color)))\r\n//       max=Math.floor(Math.floor(color));\r\n//       cubet.position.y=Math.floor(Math.floor(color)/8)*1\r\n//       materialsGreen.push(tempmat.clone())\r\n//       cubet.updateMatrix();\r\n//       GeomGreen.merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       if(all.geometries[Math.floor(color)]===undefined){\r\n//         all.geometries[Math.floor(color)]=new THREE.Geometry();\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n//       else{\r\n//         all.geometries[Math.floor(color)].merge( cubet.geometry, cubet.matrix,materials.length);\r\n//       }\r\n//     }\r\n//     // if(color<100)\r\n//     // {\r\n      \r\n//     //   tempmat=new THREE.MeshBasicMaterial( { color: \"rgb(\"+0+\",\"+Math.floor(Math.floor(color)/2)+\",\"+Math.floor(color)+\")\" } );\r\n//     // }\r\n//     // else if(color>=100&&color<=110)\r\n//     // {\r\n      \r\n//     //   tempmat=new THREE.MeshBasicMaterial( { color: \"rgb(\"+144+\",\"+144+\",\"+0+\")\" } );\r\n//     // }\r\n//     // else\r\n//     // {\r\n//     //   tempmat=new THREE.MeshBasicMaterial( {color:\"rgb(\"+0+\",\"+Math.floor(Math.floor(color))+\",\"+0+\")\"} );\r\n      \r\n//     // }\r\n\r\n//     // let cubet=new THREE.Mesh( geometry, tempmat );\r\n//     // cubet.position.x=i*1\r\n//     // cubet.position.z=j*1\r\n//     // if(max<Math.floor(color))\r\n//     // max=Math.floor(color);\r\n//     // cubet.position.y=Math.floor(Math.floor(color)/8)*1\r\n//     // materials.push(tempmat.clone())\r\n//     // cubet.updateMatrix();\r\n//     // totalGeom.merge( cubet.geometry, cubet.matrix,materials.length-3);\r\n    \r\n//     // this.scene.add( cubet );\r\n    \r\n//   }\r\n// }\r\n","import React, { useRef, useEffect ,useState} from \"react\";\r\nimport ThreeD from './ThreeD'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction ThreePage() {\r\n\r\n    const [seed, setSeed] = useState(300);\r\n\r\n    const handleChange = (e) => {\r\n        if(e.charCode==13){\r\n            console.log(\"enter pressed\")\r\n            e.preventDefault();\r\n            setSeed(e.target.value);\r\n            \r\n        } \r\n      };\r\n  return (\r\n    <div>\r\n         seed:<input type=\"text\" onKeyPress={e=>handleChange(e)} />\r\n         <ThreeD seed={seed}></ThreeD>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThreePage;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TwoDimensional from './pages/TwoDimensional'\nimport ThreeD from './pages/ThreeD'\nimport ThreePage from './pages/ThreePage'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <Router>\n        <ul>\n         <li>\n                <Link to=\"/\">Home Page</Link>\n         </li>\n         <li>\n                <Link to=\"/3d\">3d</Link>\n         </li>\n          <li>\n                <Link to=\"/2d\">2d</Link>\n         </li>\n      </ul>\n          <div>\n            <Route path=\"/2d\" component={TwoDimensional} />\n           <Route path=\"/3d\" component={ThreePage} />\n            {/* <Route path=\"/users\" component={Users} />\n            <Route path=\"/contact\" component={Contact} /> */}\n          </div>\n       </Router>\n        {/* <TwoDimensional></TwoDimensional> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}